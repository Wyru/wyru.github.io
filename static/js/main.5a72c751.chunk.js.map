{"version":3,"sources":["App.module.css","components/MyButton/MyButton.module.css","utils/useWindowDimensions.tsx","components/ParallaxComponent/ParallaxComponent.tsx","components/MyButton/MyButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","getWindowDimensions","window","width","innerWidth","height","innerHeight","ParallaxComponent","props","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","style","transform","totalDeltaX","deltaX","totalDeltaY","deltaY","halfx","xPos","mousePosition","halfy","yPos","calc","children","MyButton","className","classes","pulse","onClick","text","App","setMousePosition","background","bgShadow","pageContent","onMouseMove","x","clientX","y","clientY","pageParticles","params","particles","number","value","density","enable","size","random","anim","speed","size_min","color","line_linked","move","direction","out_mode","interactivity","events","onhover","mode","onclick","modes","bubble","distance","duration","opacity","repulse","home","bigName","quotte","menu","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a72c751.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__1KbbP\",\"App\":\"App_App__2AihS\",\"background\":\"App_background__2RMw9\",\"bgShadow\":\"App_bgShadow__22f8D\",\"pageContent\":\"App_pageContent__OMGed\",\"bigName\":\"App_bigName__2vw0I\",\"pageParticles\":\"App_pageParticles__3YSoz\",\"quotte\":\"App_quotte__2jJzy\",\"home\":\"App_home__3vMUF\",\"menu\":\"App_menu__35cPP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pulse\":\"MyButton_pulse__3zrxw\"};","import { useEffect, useState } from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","import React from \"react\";\r\nimport useWindowDimensions from \"../../utils/useWindowDimensions\";\r\n\r\ninterface IProps {\r\n  readonly deltaX: number;\r\n  readonly deltaY: number;\r\n  readonly mousePosition: Array<number>;\r\n}\r\n\r\nconst ParallaxComponent: React.FC<IProps> = props => {\r\n  const { height, width } = useWindowDimensions();\r\n\r\n  const calc = () => {\r\n    const totalDeltaX = props.deltaX;\r\n    const totalDeltaY = props.deltaY;\r\n\r\n    const halfx = width / 2;\r\n    let xPos = props.mousePosition[0];\r\n    let xProgress;\r\n    if (xPos > halfx) {\r\n      xPos -= halfx;\r\n      xProgress = xPos / halfx;\r\n    } else {\r\n      xProgress = -1 + xPos / halfx;\r\n    }\r\n    const deltaX = totalDeltaX * xProgress;\r\n\r\n    const halfy = height / 2;\r\n    let yPos = props.mousePosition[1];\r\n    let yProgress;\r\n    if (yPos > halfy) {\r\n      yPos -= halfy;\r\n      yProgress = yPos / halfy;\r\n    } else {\r\n      yProgress = -1 + yPos / halfy;\r\n    }\r\n    const deltaY = totalDeltaY * yProgress;\r\n\r\n    return `translate3d(${deltaX}%,${deltaY}%,0)`;\r\n  };\r\n\r\n  return <div style={{ transform: calc() }}>{props.children}</div>;\r\n};\r\n\r\nexport default ParallaxComponent;\r\n","import React from \"react\";\r\nimport classes from \"./MyButton.module.css\";\r\n\r\ninterface IProps {\r\n  text: string;\r\n  onClick: Function;\r\n}\r\n\r\nconst MyButton: React.FC<IProps> = props => {\r\n  return (\r\n    <div>\r\n      <button className={classes.pulse} onClick={props.onClick()}>\r\n        {props.text}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyButton;\r\n","import React, { useState } from \"react\";\r\nimport Particles from \"react-particles-js\";\r\nimport classes from \"./App.module.css\";\r\nimport ParallaxComponent from \"./components/ParallaxComponent/ParallaxComponent\";\r\nimport MyButton from \"./components/MyButton/MyButton\";\r\n\r\nconst App: React.FC = () => {\r\n  const [mousePosition, setMousePosition] = useState<Array<number>>([0, 0]);\r\n\r\n  return (\r\n    <div className={classes.App}>\r\n      <div className={classes.background}></div>\r\n      <div className={classes.bgShadow}></div>\r\n      <div\r\n        className={classes.pageContent}\r\n        onMouseMove={({ clientX: x, clientY: y }) => {\r\n          setMousePosition([x, y]);\r\n        }}\r\n      >\r\n        <Particles\r\n          className={classes.pageParticles}\r\n          params={{\r\n            particles: {\r\n              number: {\r\n                value: 100,\r\n                density: {\r\n                  enable: false\r\n                }\r\n              },\r\n              size: {\r\n                value: 3,\r\n                random: true,\r\n                anim: {\r\n                  speed: 4,\r\n                  size_min: 0.3\r\n                }\r\n              },\r\n              color: {\r\n                value: \"#414352\"\r\n              },\r\n              line_linked: {\r\n                enable: false\r\n              },\r\n              move: {\r\n                random: true,\r\n                speed: 1,\r\n                direction: \"top\",\r\n                out_mode: \"out\"\r\n              }\r\n            },\r\n            interactivity: {\r\n              events: {\r\n                onhover: {\r\n                  enable: false,\r\n                  mode: \"bubble\"\r\n                },\r\n                onclick: {\r\n                  enable: true,\r\n                  mode: \"repulse\"\r\n                }\r\n              },\r\n              modes: {\r\n                bubble: {\r\n                  distance: 250,\r\n                  duration: 2,\r\n                  size: 0,\r\n                  opacity: 0\r\n                },\r\n                repulse: {\r\n                  distance: 400,\r\n                  duration: 4\r\n                }\r\n              }\r\n            }\r\n          }}\r\n        />\r\n        <div className={classes.home}>\r\n          <div className={classes.bigName}>\r\n            <ParallaxComponent\r\n              children={\"Will Saymon\"}\r\n              deltaX={1}\r\n              deltaY={1}\r\n              mousePosition={mousePosition}\r\n            />\r\n          </div>\r\n          <div className={classes.quotte}>\r\n            <ParallaxComponent\r\n              children={\r\n                \"You can't move others hearts, unless you can move your own.\"\r\n              }\r\n              deltaX={0.5}\r\n              deltaY={0.5}\r\n              mousePosition={mousePosition}\r\n            />\r\n          </div>\r\n          <div className={classes.menu}>\r\n            <MyButton text={\"Start\"} onClick={() => {}}></MyButton>\r\n            <MyButton text={\"Continue\"} onClick={() => {}}></MyButton>\r\n            <MyButton text={\"Options\"} onClick={() => {}}></MyButton>\r\n            <MyButton text={\"About\"} onClick={() => {}}></MyButton>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}